#include<iostream>
#include<vector>
#include<unordered_map>
#include<list>
using namespace std;

int T = 0;
vector<int> ans;
vector<bool> articular; 

class Graph {
public:
    unordered_map<int, list<int>> adjlist;  
    unordered_map<int, int> disc;  
    unordered_map<int, int> low;   
    unordered_map<int, bool> vis;  

    void addedge(int u, int v) {
        adjlist[u].push_back(v);
        adjlist[v].push_back(u);
    }

    void print() {
        for (auto x : adjlist) {
            cout << x.first << "->";
            for (auto y : adjlist[x.first]) {
                cout << "{" << y << "}" << ",";
            }
            cout << endl;
        }
    }

    void arti(int src, int parent) {
        vis[src] = true;  
        low[src] = disc[src] = ++T; 
        int child = 0;  

        for (auto nbr : adjlist[src]) {
            if (nbr == parent) {
                continue; 
            }

            if (vis[nbr]) {
               
                low[src] = min(low[src], disc[nbr]);
            } else {
               
                child++;
                arti(nbr, src);

                
                low[src] = min(low[src], low[nbr]);

                
                if (parent != -1 && disc[src] <= low[nbr]) {
                    articular[src] = true;
                }
            }
        }

       
        if (parent == -1 && child > 1) {
            articular[src] = true;
        }
    }
};

int main() {
    Graph g;

    
    g.addedge(1, 2);
    g.addedge(2, 3);
    g.addedge(3, 4);
    g.addedge(1, 4);
    g.addedge(3, 5);
    g.addedge(5, 6);
    g.addedge(3, 7);
    g.addedge(7, 6);

   
    int n = 8;
    articular.resize(n + 1, false);

    g.print();

    
    g.arti(1, -1);

    
    for (int i = 1; i <= n; i++) {
        if (articular[i]) {
            ans.push_back(i);
        }
    }

    
    for (int i = 0; i < ans.size(); i++) {
        cout << ans[i] << " ";
    }
    cout << endl;

    return 0;
}
