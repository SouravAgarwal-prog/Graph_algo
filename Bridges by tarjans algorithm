#include<iostream>
#include<vector>
#include<unordered_map>
#include<list>
using namespace std;
int T=0;
vector<vector<int>>ans;
class Graph{
    public:
    unordered_map<int,list<int>>adjlist;
    unordered_map<int,int>disc;
    unordered_map<int,int>low;
    unordered_map<int,bool>vis;
    //unordered_map<int,int>parent;
    void addedge(int u,int v){
        adjlist[u].push_back(v);
        adjlist[v].push_back(u);
    }
    void print(){
        for(auto x:adjlist){
            cout<<x.first<<"->";
            for(auto y:adjlist[x.first]){
                cout<<"{"<<y<<"}"<<",";
            }
            cout<<endl;
        }
    }
    void bridges(int src,int parent){
        
        vis[src]=true;
        low[src]=disc[src]=++T;
        for(auto nbr:adjlist[src]){
            if(nbr==parent){
                continue;
            }
            else{
                if(vis[nbr]){
                    // kam se kam ye toh toh bridge nhi h
                    low[src]=min(low[src],low[nbr]);
                }
                else{
                    bridges(nbr,src);
                    low[src]=min(low[src],low[nbr]);
                    //condition of bridge:-
                    if(disc[src]<low[nbr]){
                        vector<int>temp;
                        temp.push_back(src);
                        temp.push_back(nbr);
                        ans.push_back(temp);
                    }
                }
            }
        }
    }
    
};

int main(){
    Graph g;
    g.addedge(1,2);
    g.addedge(2,3);
    g.addedge(3,4);
    g.addedge(1,4);
    g.addedge(4,5);
    g.addedge(5,6);
    g.addedge(6,7);
    g.addedge(7,8);
    g.addedge(8,9);
    g.addedge(8,10);
    g.addedge(6,9);
    g.addedge(10,12);
    g.addedge(11,12);
    g.addedge(11,10);
    g.print();
    g.bridges(1,-1);
    for(int i=0;i<ans.size();i++){
        for(int j=0;j<ans[i].size();j++){
            cout<<ans[i][j]<<" ";
        }
        cout<<endl;
    }
}
