#include<iostream>
#include<list>
#include<unordered_map>
#include<stack>
#include<vector>
#include<climits>
#include<queue>

using namespace std;
struct compare {
    bool operator()(const pair<int, int>& a, const pair<int, int>& b) {
        return a.first > b.first; 
    }
};
class Graph {
    public:
    unordered_map<int,list<pair<int,int>>>adjlist;
    priority_queue<pair<int,int>,vector<pair<int,int>>,compare>pq;
    unordered_map<int,bool>vis;
    vector<int> ans;

    Graph(int vertices) {
        ans.resize(vertices, INT_MAX);
    }
    // {src,{nbr,wt}}
    void addedge(int u,int v,int wt){
        adjlist[u].push_back({v,wt});
    }
    void printadjlist(){
        for(auto x:adjlist){
            cout<<x.first<<"->";
            for(auto y:adjlist[x.first]){
                cout<<"{ "<<y.first<<","<<y.second<<" }";
            }
            cout<<endl;
        }
    }
    void dijkstra(int src) {
    ans[src] = 0;
    pq.push({0, src});

    while (!pq.empty()) {
        pair<int, int> front = pq.top();
        int frontnode = front.second;
        int frontdist = front.first;
        pq.pop(); 

        
        if (vis[frontnode]) continue;

        vis[frontnode] = true;  

       
        for (auto x : adjlist[frontnode]) { 
            int nbrdata = x.first;
            int nbrwt = x.second;

           
            if (ans[frontnode] + nbrwt < ans[nbrdata]) {
                ans[nbrdata] = ans[frontnode] + nbrwt;
                pq.push({ans[nbrdata], nbrdata});
            }
        }
    }
}

    
    

    

};
int main(){
    Graph g(6); 

    g.addedge(6, 5, 9);
    g.addedge(5, 6, 9);
    g.addedge(4, 5, 6);
    g.addedge(5, 4, 6);
    g.addedge(2, 4, 15);
    g.addedge(4, 2, 15);
    g.addedge(2, 1, 7);
    g.addedge(1, 2, 7);
    g.addedge(1, 6, 14);
    g.addedge(1, 6, 14);
    g.addedge(6, 3, 2);
    g.addedge(3, 6, 2);
    g.addedge(3, 4, 11);
    g.addedge(3, 2, 10);
    g.addedge(3, 1, 9);
    g.addedge(4, 3, 11);
    g.addedge(2, 3, 10);
    g.addedge(1, 3, 9);
    g.printadjlist();
    
    g.dijkstra(6);
    for(int i=0;i<g.ans.size();i++){
        cout<<g.ans[i]<<" ";
    }

}
