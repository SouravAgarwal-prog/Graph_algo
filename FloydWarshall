#include <iostream>
#include<unordered_map>
#include<list>
#include<vector>
#include<stack>
#include<limits.h>
using namespace std;

class Graph{
    public:
    unordered_map<int,list<pair<int,int>>>adjList;
     Graph(int n) {
        
        }
    //u,{v,wt}
    void addEdge(int u, int v, int wt, bool direction) {
		//direction -> 0 -> undorected
		//direction -> 1 -> directed
		if(direction == 0) {
			adjList[u].push_back({v,wt});
			adjList[v].push_back({u,wt});
		}
		else {
			adjList[u].push_back({v,wt});
		}
	}
    void printAdjList() {
		for(auto i: adjList) {
			cout << i.first << "-> ";
			for(auto j: i.second) {
				cout <<"{"<<j.first<<", "<<j.second <<"}, ";
			}cout<<endl;
		}
	}
    
    void floydWrshall(int n){
        vector<vector<int>>ans(n,vector<int>(n,1e9));
        //intial state
        for(int i=0;i<n;i++){
            ans[i][i]=0;
        }
        for(auto x:adjList){
            int u=x.first;
            for(auto nbr:x.second){
                int v=nbr.first;
                int wt=nbr.second;
                ans[u][v]=wt;
            }
        }

        for(int k=0;k<n;k++){
            for(int u=0;u<n;u++){
                for(int v=0;v<n;v++){
                    ans[u][v]=min(ans[u][v],ans[u][k]+ans[k][v]);
                }
            }
        }

        for(int u=0;u<n;u++){
            for(int v=0;v<n;v++){
                cout<<ans[u][v]<<" ";
            }
            cout<<endl;
        }
    }

    
};

int main(){
    Graph g(4);
    g.addEdge(0,1,3,1);
    g.addEdge(1,0,2,1);
    g.addEdge(0,3,5,1);
    g.addEdge(3,2,2,1);
    g.addEdge(1,3,4,1);
    g.addEdge(2,1,1,1);
   
    g.printAdjList();
    g.floydWrshall(4);
    

}
